import {
  MDCTabIndicator
} from "./chunk-UD7ZNBIM.js";
import {
  MDCRipple,
  MDCRippleFoundation
} from "./chunk-COLWTUCI.js";
import {
  MDCComponent,
  MDCFoundation
} from "./chunk-5VKIL6AQ.js";
import {
  __assign,
  __extends
} from "./chunk-3OTKJMBW.js";

// node_modules/@material/tab/constants.js
var cssClasses = {
  ACTIVE: "mdc-tab--active"
};
var strings = {
  ARIA_SELECTED: "aria-selected",
  CONTENT_SELECTOR: ".mdc-tab__content",
  INTERACTED_EVENT: "MDCTab:interacted",
  RIPPLE_SELECTOR: ".mdc-tab__ripple",
  TABINDEX: "tabIndex",
  TAB_INDICATOR_SELECTOR: ".mdc-tab-indicator"
};

// node_modules/@material/tab/foundation.js
var MDCTabFoundation = function(_super) {
  __extends(MDCTabFoundation2, _super);
  function MDCTabFoundation2(adapter) {
    var _this = _super.call(this, __assign(__assign({}, MDCTabFoundation2.defaultAdapter), adapter)) || this;
    _this.focusOnActivate = true;
    return _this;
  }
  Object.defineProperty(MDCTabFoundation2, "cssClasses", {
    get: function() {
      return cssClasses;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTabFoundation2, "strings", {
    get: function() {
      return strings;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTabFoundation2, "defaultAdapter", {
    get: function() {
      return {
        addClass: function() {
          return void 0;
        },
        removeClass: function() {
          return void 0;
        },
        hasClass: function() {
          return false;
        },
        setAttr: function() {
          return void 0;
        },
        activateIndicator: function() {
          return void 0;
        },
        deactivateIndicator: function() {
          return void 0;
        },
        notifyInteracted: function() {
          return void 0;
        },
        getOffsetLeft: function() {
          return 0;
        },
        getOffsetWidth: function() {
          return 0;
        },
        getContentOffsetLeft: function() {
          return 0;
        },
        getContentOffsetWidth: function() {
          return 0;
        },
        focus: function() {
          return void 0;
        }
      };
    },
    enumerable: false,
    configurable: true
  });
  MDCTabFoundation2.prototype.handleClick = function() {
    this.adapter.notifyInteracted();
  };
  MDCTabFoundation2.prototype.isActive = function() {
    return this.adapter.hasClass(cssClasses.ACTIVE);
  };
  MDCTabFoundation2.prototype.setFocusOnActivate = function(focusOnActivate) {
    this.focusOnActivate = focusOnActivate;
  };
  MDCTabFoundation2.prototype.activate = function(previousIndicatorClientRect) {
    this.adapter.addClass(cssClasses.ACTIVE);
    this.adapter.setAttr(strings.ARIA_SELECTED, "true");
    this.adapter.setAttr(strings.TABINDEX, "0");
    this.adapter.activateIndicator(previousIndicatorClientRect);
    if (this.focusOnActivate) {
      this.adapter.focus();
    }
  };
  MDCTabFoundation2.prototype.deactivate = function() {
    if (!this.isActive()) {
      return;
    }
    this.adapter.removeClass(cssClasses.ACTIVE);
    this.adapter.setAttr(strings.ARIA_SELECTED, "false");
    this.adapter.setAttr(strings.TABINDEX, "-1");
    this.adapter.deactivateIndicator();
  };
  MDCTabFoundation2.prototype.computeDimensions = function() {
    var rootWidth = this.adapter.getOffsetWidth();
    var rootLeft = this.adapter.getOffsetLeft();
    var contentWidth = this.adapter.getContentOffsetWidth();
    var contentLeft = this.adapter.getContentOffsetLeft();
    return {
      contentLeft: rootLeft + contentLeft,
      contentRight: rootLeft + contentLeft + contentWidth,
      rootLeft,
      rootRight: rootLeft + rootWidth
    };
  };
  return MDCTabFoundation2;
}(MDCFoundation);

// node_modules/@material/tab/component.js
var MDCTab = function(_super) {
  __extends(MDCTab2, _super);
  function MDCTab2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  MDCTab2.attachTo = function(root) {
    return new MDCTab2(root);
  };
  MDCTab2.prototype.initialize = function(rippleFactory, tabIndicatorFactory) {
    if (rippleFactory === void 0) {
      rippleFactory = function(el, foundation) {
        return new MDCRipple(el, foundation);
      };
    }
    if (tabIndicatorFactory === void 0) {
      tabIndicatorFactory = function(el) {
        return new MDCTabIndicator(el);
      };
    }
    this.id = this.root.id;
    var rippleFoundation = new MDCRippleFoundation(MDCRipple.createAdapter(this));
    this.ripple = rippleFactory(this.root, rippleFoundation);
    var tabIndicatorElement = this.root.querySelector(MDCTabFoundation.strings.TAB_INDICATOR_SELECTOR);
    this.tabIndicator = tabIndicatorFactory(tabIndicatorElement);
    this.content = this.root.querySelector(MDCTabFoundation.strings.CONTENT_SELECTOR);
  };
  MDCTab2.prototype.initialSyncWithDOM = function() {
    var _this = this;
    this.handleClick = function() {
      _this.foundation.handleClick();
    };
    this.listen("click", this.handleClick);
  };
  MDCTab2.prototype.destroy = function() {
    this.unlisten("click", this.handleClick);
    this.ripple.destroy();
    _super.prototype.destroy.call(this);
  };
  MDCTab2.prototype.getDefaultFoundation = function() {
    var _this = this;
    var adapter = {
      setAttr: function(attr, value) {
        return _this.root.setAttribute(attr, value);
      },
      addClass: function(className) {
        return _this.root.classList.add(className);
      },
      removeClass: function(className) {
        return _this.root.classList.remove(className);
      },
      hasClass: function(className) {
        return _this.root.classList.contains(className);
      },
      activateIndicator: function(previousIndicatorClientRect) {
        _this.tabIndicator.activate(previousIndicatorClientRect);
      },
      deactivateIndicator: function() {
        _this.tabIndicator.deactivate();
      },
      notifyInteracted: function() {
        return _this.emit(MDCTabFoundation.strings.INTERACTED_EVENT, { tabId: _this.id }, true);
      },
      getOffsetLeft: function() {
        return _this.root.offsetLeft;
      },
      getOffsetWidth: function() {
        return _this.root.offsetWidth;
      },
      getContentOffsetLeft: function() {
        return _this.content.offsetLeft;
      },
      getContentOffsetWidth: function() {
        return _this.content.offsetWidth;
      },
      focus: function() {
        return _this.root.focus();
      }
    };
    return new MDCTabFoundation(adapter);
  };
  Object.defineProperty(MDCTab2.prototype, "active", {
    get: function() {
      return this.foundation.isActive();
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTab2.prototype, "focusOnActivate", {
    set: function(focusOnActivate) {
      this.foundation.setFocusOnActivate(focusOnActivate);
    },
    enumerable: false,
    configurable: true
  });
  MDCTab2.prototype.activate = function(computeIndicatorClientRect) {
    this.foundation.activate(computeIndicatorClientRect);
  };
  MDCTab2.prototype.deactivate = function() {
    this.foundation.deactivate();
  };
  MDCTab2.prototype.computeIndicatorClientRect = function() {
    return this.tabIndicator.computeContentClientRect();
  };
  MDCTab2.prototype.computeDimensions = function() {
    return this.foundation.computeDimensions();
  };
  MDCTab2.prototype.focus = function() {
    this.root.focus();
  };
  return MDCTab2;
}(MDCComponent);

export {
  cssClasses,
  strings,
  MDCTabFoundation,
  MDCTab
};
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
//# sourceMappingURL=chunk-HDQE5VMC.js.map
